import 'package:flutter/material.dart';
// import 'package:speech_to_text/speech_to_text.dart';
import '../models/user_profile.dart';
import '../models/interview_session.dart';
import 'feedback_screen.dart';

class InterviewScreen extends StatefulWidget {
  final UserProfile userProfile;
  final InterviewSession session;

  const InterviewScreen({
    super.key,
    required this.userProfile,
    required this.session,
  });

  @override
  State<InterviewScreen> createState() => _InterviewScreenState();
}

class _InterviewScreenState extends State<InterviewScreen> {
  final TextEditingController _textController = TextEditingController();
  // final SpeechToText _speech = SpeechToText();
  bool _isListening = false;
  bool _isLoading = true;
  bool _isSendingAnswer = false;

  @override
  void initState() {
    super.initState();
    // _initializeSpeech();
    _getFirstQuestion();
  }

  // Future<void> _initializeSpeech() async {
  //   bool available = await _speech.initialize();
  //   if (available) {
  //     // Speech recognition is available
  //   }
  // }

  // Placeholder for API service call
  Future<void> _getFirstQuestion() async {
    // TODO: Replace with actual Gemini API call
    await Future.delayed(const Duration(seconds: 1));
    setState(() {
      widget.session.addQuestion("Tell me about yourself and your background.");
      _isLoading = false;
    });
  }

  // Placeholder for sending answer to API
  Future<void> _sendAnswer(String answer) async {
    setState(() {
      _isSendingAnswer = true;
    });

    widget.session.addAnswer(answer);
    _textController.clear();

    // TODO: Replace with actual Gemini API call
    await Future.delayed(const Duration(seconds: 1));

    // Check if interview should end
    if (widget.session.conversation.length >= 5) { // For demo, end after 5 questions
      widget.session.completeSession();
      _navigateToFeedback();
    } else {
      // Add next question (mock)
      widget.session.addQuestion("What are your strengths and weaknesses?");
    }

    setState(() {
      _isSendingAnswer = false;
    });
  }

  void _navigateToFeedback() {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => FeedbackScreen(
          session: widget.session,
          // Placeholder result (will be generated by API in real app)
          result: {
            'score': 78,
            'strengths': ['Communication skills', 'Technical knowledge'],
            'improvements': ['Be more concise', 'Provide more examples'],
            'feedback': 'Overall good performance with room for improvement in providing specific examples.'
          },
        ),
      ),
    );
  }

  // void _toggleListening() async {
  //   if (_isListening) {
  //     _speech.stop();
  //     setState(() {
  //       _isListening = false;
  //     });
  //   } else {
  //     setState(() {
  //       _isListening = true;
  //     });
  //     await _speech.listen(
  //       onResult: (result) {
  //         setState(() {
  //           _textController.text = result.recognizedWords;
  //         });
  //       },
  //       localeId: widget.userProfile.language == 'id' ? 'id_ID' : 'en_US',
  //     );
  //   }
  // }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Interview Session'),
        actions: [
          TextButton(
            onPressed: () {
              widget.session.completeSession();
              _navigateToFeedback();
            },
            child: const Text('End Interview'),
          ),
        ],
      ),
      body: Column(
        children: [
          // Interview info
          Container(
            padding: const EdgeInsets.all(12),
            color: Colors.grey[200],
            child: Row(
              children: [
                Icon(
                  widget.session.type == InterviewType.hr
                      ? Icons.person_outline
                      : Icons.code,
                  size: 20,
                ),
                const SizedBox(width: 8),
                Text(
                  widget.session.type == InterviewType.hr
                      ? 'HR Interview'
                      : 'Technical Interview: ${widget.session.role}',
                  style: const TextStyle(fontWeight: FontWeight.bold),
                ),
              ],
            ),
          ),

          // Chat area
          Expanded(
            child: _isLoading
                ? const Center(child: CircularProgressIndicator())
                : ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: widget.session.conversation.length,
              itemBuilder: (context, index) {
                final qa = widget.session.conversation[index];
                return Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    // Question
                    Container(
                      padding: const EdgeInsets.all(12),
                      margin: const EdgeInsets.only(bottom: 8),
                      decoration: BoxDecoration(
                        color: Colors.blue[100],
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Text('Interviewer: ${qa.question}'),
                    ),
                    // Answer if exists
                    if (qa.answer != null)
                      Container(
                        padding: const EdgeInsets.all(12),
                        margin: const EdgeInsets.only(
                          left: 24,
                          bottom: 16,
                        ),
                        decoration: BoxDecoration(
                          color: Colors.grey[200],
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Text('You: ${qa.answer}'),
                      ),
                  ],
                );
              },
            ),
          ),

          // Input area
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                // IconButton(
                //   icon: Icon(_isListening ? Icons.stop : Icons.mic),
                //   onPressed: _toggleListening,
                //   color: _isListening ? Colors.red : null,
                // ),
                Expanded(
                  child: TextField(
                    controller: _textController,
                    decoration: const InputDecoration(
                      hintText: 'Type your answer...',
                      border: OutlineInputBorder(),
                    ),
                    maxLines: null,
                  ),
                ),
                IconButton(
                  icon: _isSendingAnswer
                      ? const SizedBox(
                    height: 24,
                    width: 24,
                    child: CircularProgressIndicator(strokeWidth: 2),
                  )
                      : const Icon(Icons.send),
                  onPressed: _isSendingAnswer
                      ? null
                      : () {
                    if (_textController.text.trim().isNotEmpty) {
                      _sendAnswer(_textController.text);
                    }
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}